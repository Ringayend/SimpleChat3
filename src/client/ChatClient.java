// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;     private ObservableClient observable;    private String id;    //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   * @param id The name of the client.   */  public ChatClient(String host, int port, ChatIF clientUI, String id) 		    throws IOException 		  {		    this.observable = new ObservableClient(host, port);		    this.observable.addObserver(this); 		    this.clientUI = clientUI;		    this.id = id;		    clientUI.display("Please enter '#login id' to connect :");		  }  //Instance methods ************************************************      public String getId(){	  return this.id;  }      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */	public void handleMessageFromClientUI(String message) {		String [] splitMessage = message.split(" ");		switch(splitMessage[0]) {			case "#quit" :				this.quit();				break;			case "#logoff":				try {					this.observable.closeConnection();				} catch (IOException e1) {					e1.printStackTrace();				}				break;			case "#sethost":				if (this.observable.isConnected()){					this.observable.setHost(splitMessage[1]);				}				break;			case "#setport":				if (this.observable.isConnected()){					this.observable.setPort(Integer.parseInt(splitMessage[1]));				}				break;			case "#login":				if (!this.observable.isConnected()){					try {						this.observable.openConnection();						this.observable.sendToServer(message);						} catch (IOException e) {						e.printStackTrace();					}				}				break;			case "#gethost":				System.out.println(this.observable.getHost());				break;			case "#getport":				System.out.println(this.observable.getPort());				break;			default:				try {					this.observable.sendToServer(message);				} catch (IOException e) {					clientUI.display("Could not send message to server because you are not logged in.  Terminating client.");					quit();				}		}			}    // Hook methods  protected void connectionClosed() {	  clientUI.display("Connection Closed ");  }    protected void connectionException(Exception exception) {	  clientUI.display(" Closing Connection fail");  }    protected void connectionEstablished() {	  clientUI.display("Connection established");  }    /**   * This method terminates the client.   */  public void quit()  {    try    {    	this.observable.closeConnection();    }    catch(IOException e) {}    System.exit(0);  }	@Override	public void update(Observable o, Object arg) {		if (arg instanceof Exception){			this.connectionException((Exception) arg);		} else if (arg.equals(ObservableClient.CONNECTION_ESTABLISHED)) {			this.connectionEstablished();		} else if (arg.equals(ObservableClient.CONNECTION_CLOSED)) {			this.connectionClosed();		} else {			this.handleMessageFromServer(arg);		}			}}//End of ChatClient class